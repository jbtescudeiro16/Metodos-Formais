/*

Finish the specification of this notification concept,
including its events, scenarios, and operational principles.

*/ 

sig Event {}

sig User {
	var subscriptions : set Event,
	var notifications : set Event
}

pred stutter {
	subscriptions' = subscriptions
	notifications' = notifications
}

pred read [u : User] {
	// Read all notifications
	some u.notifications
	no u.notifications'
	all usr:User-u | usr.notifications' = usr.notifications
	all usr:User | usr.subscriptions' = usr.subscriptions
	
}

pred subscribe [u : User, e : Event] {
	// Subscribe an event
	e not in u.subscriptions
	u.subscriptions'=u.subscritpitons+e
	all usr:User | usr.notifications' = usr.notifications
	all usr:User -u | usr.subscriptions' = usr.subscriptions

}

pred unsubscribe [u : User, e : Event] {
	// Unsubscribe from a event
	e in u.subscriptions
	u.subscriptions' = u.subscriptions -e 
	e in u.notifications implies u.notifications'=u.notifications-e
	all usr:User-u | usr.notifications' = usr.notifications
	all usr:User -u | usr.subscriptions' = usr.subscriptions
}

pred occur [e : Event] {
	// Occurrence of an event
	all u: User | e in u.subscriptions implies u.notifications' = u.notifications + e
	all u: User | e not in u.subscriptions implies u.notifications' = u.notifications 
	all u:User |  u.subscriptions = u.subscriptions'
}

fact {
	no subscriptions
	no notifications
	always {
		stutter or
		(some u : User | read[u]) or
		(some u : User, e : Event | subscribe[u,e] or unsubscribe[u,e]) or
		(some e : Event | occur[e])
	}
}

// Validation

run Example {
	// Empty run to be used for simulation
}

run Scenario1 {
	// An event is subscribed, then occurs, and the respective notification is read
	// se o pedicado Ã© ler todas n faz sentido aqui ler so uma , mas tem de ser
	some e:Event, u:User{
	subcribe[u,e];
	occur[e];
	read[u]
}

} expect 1

run Scenario2 {
	// An event is subscribed, unsubscribed, and then occurs
	some e:Event, u:User{
	subcribe[u,e];
	unsubscribe[u,e];
	occur[e]	
}

} expect 1

run Scenario3 {
	// An event is subscribed by two users and then occurs
	some e : Event,disj u1,u2:User {
	subscribe[u1,e];
	subscribe[u2,e];
	occur[e]
 }
} expect 1

run Scenario4 {
	// An user subscribes two events, then both occur, then unsubscribes one of them, and finally reads the notifications
	some disj e1,e2: Event,u:User {
	subscribe[u,e1];
	subscribe[u,e2];
	occur[e1];
	occur[e2];
	unsubscribe[u,e2];
	read [u]
 }
} expect 1

run Scenario5 {
	// An user subscribes the same event twice in a row
	// An user subscribes the same event twice in a row
	some e:Event,u:User { 
	subscribe[u,e];
	subscribe[u,e]
}

} expect 0

run Scenario6 {
	// Eventually an user reads nofications twice in a row
	some u:User{
	read[u];
	read[u]
}

} expect 0

// Verification 

check OP1 {
	// Users can only have notifications of subscribed events
	always (all u: User, e: Event | 
		e in u.notifications implies e in u.subscriptions)
}

check OP2 {
	// Its not possible to read notifications before some event is subscribed
	always ( all u:User |
	 		read[u] implies some u.subscriptions)
}

check OP3 {
	// Unsubscribe undos subscribe
	all u:User,e:Event |
		always(( subscribe[u,e];unsubscribe[u,e]) implies (subscriptions'' = subscriptions and notifications'' = notifications))
}

check OP4 {
	// Notify is idempotent
	all e:Event |always(( occur[e];occur[e]) implies (subscriptions'' = subscriptions' and notifications'' = notifications'))

}

check OP5 {
	// After reading the notifications it is only possible to read again after some notification on a subscribed event occurs
	// BY CHATGPT
		always (all u:User |
				read[u] implies after ((some e:u.subscriptions
								| occur[e]) releases not read[u]) )
}