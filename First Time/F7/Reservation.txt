/*

Finish the specification of this notification concept,
including its events, scenarios, and operational principles.

*/ 

sig Resource {}

sig User {
	var reservations : set Resource
}

var sig Available in Resource {}

pred reserve[u : User, r : Resource] {
	// Make a reservation
	r in available
	Available'= Available - r
	u.reservations'= u.reservations + r 
	all users : User -u | users.reservations'=u.reservations
	

}

pred cancel[u : User, r : Resource] {
	// Cancel a reservation
	r in u.reservations
	u.reservations' = u.reservations -r 
	Available' = Available +r 
	all users : User -u | users.reservations'=u.reservations
	

}

pred use[u : User, r : Resource] {
	// Use a reserved resource
	r in u.reservations
	u.reservations' = u.reservations -r 
	Avaialable' = Available
	all us : User - u | us.reservations' = us.reservations
}

pred cleanup {
	some Resource - Available - User.reservations
	Available' = Resource  - User.reservations
	all u : User | u.reservations' = u.reservations

}

pred stutter {
	Available' = Available
	reservations' = reservations
}

fact {
	Available = Resource
	no reservations
	always {
		stutter
		or 
		cleanup
		or 
		(some u : User , r : Resource| reserve[u,r] or cancel[u,r] or use[u,r])
	}
}

// Validation

run Example {
	// Empty run to be used for simulation
}

run Scenario1 {
	// An user reserves a resource, uses it, and finally a cleanup occurs
	some u: User, r: Resource {
	reserve[u, r];
	use[u, r];
	cleanup
}
} expect 1

run Scenario2 {
	// An user reserves a resource, cancels the reservation, and reserves again
	some u: User, r: Resource {
	 reserve[u, r];
	 cancel[u,r];
	reserve[u, r]
} expect 1

run Scenario3 {
	// An user reserves two resources, cancels one, uses the other, and finally a cleanup occurs
		some u: User,disj r1,r2: Resource {
		 reserve[u, r1] ;
		reserve [u,r2];
		cancel[u,r1];
		use[u,r2];
		cleanup
}
} expect 1

run Scenario4 {
	// Two users try to reserve the same resource
	some u1, u2: User, r: Resource | reserve[u1, r] and reserve[u2, r]
} expect 0

run Scenario5 {
	// Eventually a cleanup is performed twice in a row
	cleanup;
	cleanup
} expect 0

// Verification

check OP1 {
	// Reserved resources aren't available
	always(all u: User, r: Resource | {
		(r in u.reservations) implies not (r in Available))
	}
}

check OP2 {
	// Used resources were reserved before
	always ( all u:User,r:Resource|
			 use[u,r] implies once reserve[u,r])
}

check OP3 {
	// Used resources can only be reserved again after a cleanup
	((r in u.reservations') and (r in u.reservations)) implies (cleanup)
}

check OP4 {
	// After a cleanup all unreserved resources are available
	always(cleanup implies after( Resource-User.reservations in Available))
	
}

check OP5 {
	// Cancel undoes reserve
	all u:User,r:Resource |
		 always (( reserve[u,r]; cancel[u,r]) implies (Available''=Available and reservations''=reservations))
}	

check OP6 {
	// If a cleanup occurs some resource was used before
	always (cleanup implies once some r:Resource,u:User |use[u,r] )
}

check OP7 {
	// Used resources were not canceled since being reserved
	always( all u:User,r:Resource | 
			use[u,r] implies not cancel[u,r] since reserve[u,r])
}

check OP8 {
	// Reserved resources can be used while not used or canceled
	all u: User, r: Resource | {
		(r in u.reservations) implies (use[u, r] or (r not in u.reservations' and not cancel[u, r]))
	}
}

check OP9 {
	// The first event to occur will be a reservation
	{
		(no reserve[u, r] and no cancel[u, r] and no use[u, r]) until reserve[u, r])
	}

}

check OP10 {
	// If cleanups and cancels never occur the available resources keep diminishing
	//NOT SHORE
	all r: Resource | {
		(no cleanup and no (some u: User | cancel[u, r])) implies (Available' = Available - r)
	}
}
